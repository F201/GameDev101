/*    
    Copyright (C) 2012 http://software-talk.org/ (developer@software-talk.org)

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

package snake.view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;

import javax.swing.JLabel;
import javax.swing.UIManager;

import snake.Utilities;
import snake.controller.AbstractGameController;
import snake.controller.IInputcontroller;

/**
 * A simple gui for the game snake using swing.
 */
public class SwingGui extends javax.swing.JFrame implements IGui,
		IInputcontroller {

	private AbstractGameController controller;
	private int lastInput;
	private JLabel[][] labels;
	private final boolean borderSet;
	// Color writing = Color.BLACK;
	// Color backgroundFrame = new Color(128,230,179);
	private final Color background = new Color(192, 243, 217);

	/** Creates new form SwingGui. */
	public SwingGui() {
		super();
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (Exception e) {
			Utilities
					.print("could not set systems look and feel, using java default.");
		}
		// this.setBackground(backgroundFrame);
		initComponents();
		borderSet = false;
	}

	/**
	 * sets the controller to gui. This has to be done.
	 * <p>
	 * Also changes the size of the game panel and initializes the jlabels.
	 * 
	 * @param controller
	 *            controller
	 */
	public void setController(AbstractGameController controller) {
		this.controller = controller;
		jPanel1.setPreferredSize(new Dimension(controller.getWidth() * 20,
				controller.getHight() * 20));
		jPanel1.setLayout(new GridLayout(controller.getWidth(), controller
				.getHight()));
		jPanel1.setBackground(background);
		initLabels();
		jPanel1.setFocusable(true);
	}

	/**
	 * initialises empty jLabels.
	 */
	private void initLabels() {
		labels = new JLabel[controller.getWidth()][controller.getHight()];
		for (int j = 0; j < controller.getHight(); j++) {
			for (int i = 0; i < controller.getWidth(); i++) {
				JLabel newLabel = new JLabel(" ");
				labels[i][j] = newLabel;
				newLabel.setVisible(true);
				newLabel.updateUI();
				jPanel1.add(newLabel);
			}
		}
		jPanel1.updateUI();
	}

	@Override
	public void setSnake(int x, int y) {
		labels[x][y].setText("@");
	}

	@Override
	public void setBoni(int x, int y) {
		labels[x][y].setText("*");
	}

	@Override
	public void setBorder(int x, int y) {
		if (!borderSet) {
			labels[x][y].setText("#");
		}
	}

	@Override
	public void setEmpty(int x, int y) {
		labels[x][y].setText(" ");
	}

	@Override
	public void setScore(int score) {
		jLabel1.setText("score: " + score);
	}

	@Override
	public void sendMessage(String message) {
		jLabel2.setText(message);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jPanel1 = new javax.swing.JPanel();
		jLabel1 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		jMenuBar1 = new javax.swing.JMenuBar();
		jMenu1 = new javax.swing.JMenu();
		jMenuItem1 = new javax.swing.JMenuItem();
		jMenuItem2 = new javax.swing.JMenuItem();
		jMenu2 = new javax.swing.JMenu();
		jMenuItem3 = new javax.swing.JMenuItem();
		jMenuItem4 = new javax.swing.JMenuItem();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
		jPanel1.addKeyListener(new java.awt.event.KeyAdapter() {
			@Override
			public void keyPressed(java.awt.event.KeyEvent evt) {
				jPanel1KeyPressed(evt);
			}
		});

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(
				jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 384,
				Short.MAX_VALUE));
		jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 358,
				Short.MAX_VALUE));

		jLabel1.setText("score");

		jMenu1.setText("File");

		jMenuItem1.setText("play");
		jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jMenuItem1ActionPerformed(evt);
			}
		});
		jMenu1.add(jMenuItem1);

		jMenuItem2.setText("exit");
		jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jMenuItem2ActionPerformed(evt);
			}
		});
		jMenu1.add(jMenuItem2);

		jMenuBar1.add(jMenu1);

		jMenu2.setText("Edit");
		jMenu2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jMenu2ActionPerformed(evt);
			}
		});

		jMenuItem3.setText("Settings");
		jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jMenuItem3ActionPerformed(evt);
			}
		});
		jMenu2.add(jMenuItem3);

		jMenuItem4.setText("Highscore");
		jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jMenuItem4ActionPerformed(evt);
			}
		});
		jMenu2.add(jMenuItem4);

		jMenuBar1.add(jMenu2);

		setJMenuBar(jMenuBar1);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(
														jPanel1,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addGroup(
														layout.createSequentialGroup()
																.addComponent(
																		jLabel1)
																.addGap(248,
																		248,
																		248)
																.addComponent(
																		jLabel2,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		190,
																		javax.swing.GroupLayout.PREFERRED_SIZE)))
								.addContainerGap(
										javax.swing.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(jLabel1)
												.addComponent(
														jLabel2,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														17,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGap(30, 30, 30)
								.addComponent(jPanel1,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addContainerGap(46, Short.MAX_VALUE)));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItem2ActionPerformed
		controller.stopPlaying();
		this.dispose();
	}// GEN-LAST:event_jMenuItem2ActionPerformed

	private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenu2ActionPerformed

	}// GEN-LAST:event_jMenu2ActionPerformed

	private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItem3ActionPerformed
		new OptionsDialog(this, true).setVisible(true);
	}// GEN-LAST:event_jMenuItem3ActionPerformed

	private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItem4ActionPerformed
		new HighScoreDialog(this, true).setVisible(true);
	}// GEN-LAST:event_jMenuItem4ActionPerformed

	private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItem1ActionPerformed
		controller.stopPlaying();
		controller.resetGame();
		Thread starter = new StarterThread();
		starter.start();
	}// GEN-LAST:event_jMenuItem1ActionPerformed

	private void jPanel1KeyPressed(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_jPanel1KeyPressed
		char keyChar = evt.getKeyChar();
		// 1 = up, 2 = right, 3 = down, 4 = left, other is ignored
		if (keyChar == 'w') {
			lastInput = 1;
		} else if (keyChar == 'd') {
			lastInput = 2;
		} else if (keyChar == 's') {
			lastInput = 3;
		} else if (keyChar == 'a') {
			lastInput = 4;
		} else {
			lastInput = -1;
		}
	}// GEN-LAST:event_jPanel1KeyPressed

	@Override
	public int getInput() {
		return lastInput;
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JMenu jMenu1;
	private javax.swing.JMenu jMenu2;
	private javax.swing.JMenuBar jMenuBar1;
	private javax.swing.JMenuItem jMenuItem1;
	private javax.swing.JMenuItem jMenuItem2;
	private javax.swing.JMenuItem jMenuItem3;
	private javax.swing.JMenuItem jMenuItem4;
	private javax.swing.JPanel jPanel1;

	// End of variables declaration//GEN-END:variables

	private class StarterThread extends Thread {
		@Override
		public void run() {
			lastInput = -1;
			controller.setIsPlaying();
			controller.play();
		}
	}

	@Override
	public void updateUI() {
	}
}
